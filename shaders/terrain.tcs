#version 410 core

@include "lib/camera.glsl"

layout (vertices = 4) out;

uniform mat4 uModel;

in vec2 TexCoord[];
out vec2 TexCoords[];

void main()
{
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
    TexCoords[gl_InvocationID] = TexCoord[gl_InvocationID];

    if (gl_InvocationID == 0)
    {
        const int kMinTessLevel = 4;
        const int kMaxTessLevel = 64;
        const float kMinDistance = 20;
        const float kMaxDistance = 800;

        vec4 eyeSpacePos00 = uCamera.view * uModel * gl_in[0].gl_Position;
        vec4 eyeSpacePos01 = uCamera.view * uModel * gl_in[1].gl_Position;
        vec4 eyeSpacePos10 = uCamera.view * uModel * gl_in[2].gl_Position;
        vec4 eyeSpacePos11 = uCamera.view * uModel * gl_in[3].gl_Position;

        float distance00 = clamp((abs(eyeSpacePos00.z) - kMinDistance) / (kMaxDistance - kMinDistance), 0, 1);
        float distance01 = clamp((abs(eyeSpacePos01.z) - kMinDistance) / (kMaxDistance - kMinDistance), 0, 1);
        float distance10 = clamp((abs(eyeSpacePos10.z) - kMinDistance) / (kMaxDistance - kMinDistance), 0, 1);
        float distance11 = clamp((abs(eyeSpacePos11.z) - kMinDistance) / (kMaxDistance - kMinDistance), 0, 1);

        float tessLevel0 = mix(kMaxTessLevel, kMinTessLevel, min(distance10, distance00));
        float tessLevel1 = mix(kMaxTessLevel, kMinTessLevel, min(distance00, distance01));
        float tessLevel2 = mix(kMaxTessLevel, kMinTessLevel, min(distance01, distance11));
        float tessLevel3 = mix(kMaxTessLevel, kMinTessLevel, min(distance11, distance10));

        gl_TessLevelOuter[0] = tessLevel0;
        gl_TessLevelOuter[1] = tessLevel1;
        gl_TessLevelOuter[2] = tessLevel2;
        gl_TessLevelOuter[3] = tessLevel3;

        gl_TessLevelInner[0] = max(tessLevel1, tessLevel3);
        gl_TessLevelInner[1] = max(tessLevel0, tessLevel2);
    }
}
