#version 410 core

@include "lib/camera.glsl"

layout (quads, fractional_even_spacing, cw) in;

uniform sampler2D uHeightmap;
uniform sampler2D uNormalmap;
uniform float uScale;
uniform mat4 uModel;

in vec2 TexCoords[];

out TES_OUT
{
    float Height;
    vec3 FragPos;
    vec2 TexCoords;
    vec3 Normal;
} tes_out;

void main()
{
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    vec2 t00 = TexCoords[0];
    vec2 t01 = TexCoords[1];
    vec2 t10 = TexCoords[2];
    vec2 t11 = TexCoords[3];

    vec2 t0 = (t01 - t00) * u + t00;
    vec2 t1 = (t11 - t10) * u + t10;
    vec2 texCoord = (t1 - t0) * v + t0;

    tes_out.Height = texture(uHeightmap, texCoord).r * uScale - 16.0;

    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    vec4 uVec = p01 - p00;
    vec4 vVec = p10 - p00;
    vec4 normal = normalize(vec4(cross(vVec.xyz, uVec.xyz), 0)); // Not same as surface normal, used for displacement

    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;
    vec4 p = (p1 - p0) * v + p0 + normal * tes_out.Height;

    /* Surface normal */
    tes_out.Normal = texture(uNormalmap, texCoord).xyz;
    //tes_out.Normal = normalize(transpose(inverse(mat3(uModel))) * tes_out.Normal);

    tes_out.FragPos = vec3(uModel * p);

    tes_out.TexCoords = vec2(0.0);

    gl_Position = uCamera.projView * vec4(tes_out.FragPos, 1.0);
}
