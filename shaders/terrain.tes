#version 410 core

@include "lib/camera.glsl"

layout (quads, fractional_odd_spacing, cw) in;

uniform float uScale;
uniform mat4 uModel;

in vec2 TexCoords[];

out TES_OUT
{
    float Height;
    vec3 FragPos;
    vec2 TexCoords;
    vec3 Normal;
} tes_out;

const float kPI = 3.14159;

// float rand(vec2 co)
// {
//     return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
// }

// float noise(vec2 p, float freq)
// {
//     float unit = 1.0 / freq;
//     vec2 ij = floor(p / unit);
//     vec2 xy = mod(p, unit) / unit;
//     xy = 0.5 * (1.0 - cos(kPI * xy));
//     float a = rand((ij + vec2(0.0, 0.0)));
//     float b = rand((ij + vec2(1.0, 0.0)));
//     float c = rand((ij + vec2(0.0, 1.0)));
//     float d = rand((ij + vec2(1.0, 1.0)));
//     float x1 = mix(a, b, xy.x);
//     float x2 = mix(c, d, xy.x);
//     return mix(x1, x2, xy.y);
// }

// float pNoise(vec2 p, int res)
// {
//     float persistance = 0.8;
//     float n = 0.0;
//     float normK = 0.0;
//     float f = 4.0;
//     float amp = 128.0;
//     int iCount = 0;

//     for (int i = 0; i < 50; i++)
//     {
//         n += amp * noise(p, f);
//         f *= 2;
//         normK += amp;
//         amp *= persistance;
//         if (iCount == res)
//             break;
//         iCount++;
//     }

//     float nf = n / normK;
//     return nf * nf * nf * nf;
// }

vec4 mod289(vec4 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x)
{
  return mod289(((x*34.0)+10.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

vec2 fade(vec2 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}

// Classic Perlin noise
float pnoise(vec2 P)
{
  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);
  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);
  Pi = mod289(Pi); // To avoid truncation effects in permutation
  vec4 ix = Pi.xzxz;
  vec4 iy = Pi.yyww;
  vec4 fx = Pf.xzxz;
  vec4 fy = Pf.yyww;

  vec4 i = permute(permute(ix) + iy);

  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
  vec4 gy = abs(gx) - 0.5 ;
  vec4 tx = floor(gx + 0.5);
  gx = gx - tx;

  vec2 g00 = vec2(gx.x,gy.x);
  vec2 g10 = vec2(gx.y,gy.y);
  vec2 g01 = vec2(gx.z,gy.z);
  vec2 g11 = vec2(gx.w,gy.w);

  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
  g00 *= norm.x;  
  g01 *= norm.y;  
  g10 *= norm.z;  
  g11 *= norm.w;  

  float n00 = dot(g00, vec2(fx.x, fy.x));
  float n10 = dot(g10, vec2(fx.y, fy.y));
  float n01 = dot(g01, vec2(fx.z, fy.z));
  float n11 = dot(g11, vec2(fx.w, fy.w));

  vec2 fade_xy = fade(Pf.xy);
  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
  return 2.3 * n_xy;
}

const float kFrequency = 1.0 / 256.0;

float sampleTerrain(vec2 texCoord)
{
    return pnoise(texCoord * kFrequency) * uScale + 48;
}

void main()
{
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;

    vec2 t00 = TexCoords[0];
    vec2 t01 = TexCoords[1];
    vec2 t10 = TexCoords[2];
    vec2 t11 = TexCoords[3];

    vec2 t0 = (t01 - t00) * u + t00;
    vec2 t1 = (t11 - t10) * u + t10;
    vec2 texCoord = (t1 - t0) * v + t0;

    vec4 p00 = gl_in[0].gl_Position;
    vec4 p01 = gl_in[1].gl_Position;
    vec4 p10 = gl_in[2].gl_Position;
    vec4 p11 = gl_in[3].gl_Position;

    vec4 uVec = p01 - p00;
    vec4 vVec = p10 - p00;
    vec4 normal = normalize(vec4(cross(vVec.xyz, uVec.xyz), 0)); // Not same as surface normal, used for displacement

    vec4 p0 = (p01 - p00) * u + p00;
    vec4 p1 = (p11 - p10) * u + p10;

    vec4 pos = (p1 - p0) * v + p0;

    float ay = sampleTerrain(pos.xz);
    float by = sampleTerrain(pos.xz + vec2(0.1, 0));
    float cy = sampleTerrain(pos.xz + vec2(0, 0.1));

    tes_out.Height = ay;

    vec3 a = vec3(pos.x, ay, pos.z);
    vec3 b = vec3(pos.x + 0.1, by, pos.z);
    vec3 c = vec3(pos.x, cy, pos.z + 0.1);
    tes_out.Normal = -normalize(cross(b - a, c - a));

    vec4 p = pos + normal * tes_out.Height;

    /* Surface normal */
    //tes_out.Normal = texture(uNormalmap, texCoord).xyz;
    tes_out.Normal = normalize(transpose(inverse(mat3(uModel))) * tes_out.Normal);

    tes_out.FragPos = vec3(uModel * p);

    tes_out.TexCoords = vec2(0.0);

    gl_Position = uCamera.projView * vec4(tes_out.FragPos, 1.0);
}
